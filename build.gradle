configurations {
    jaxb
}

dependencies {
    compile project(':ringingmaster-persist')

    jaxb 'com.sun.xml.bind:jaxb-xjc:2.2.7-b41'
    jaxb 'com.sun.xml.bind:jaxb-impl:2.2.7-b41'
    jaxb 'javax.xml.bind:jaxb-api:2.2.7'
}

def generatedCCBRMethodLibraryModelSchemaDir = "${projectDir}/src/main/ccResources"
def generatedCCBRMethodLibraryModelClassesDir = "${buildDir}/classes/generated/jaxb"
def generatedCCBRMethodLibraryModelGeneratedDir = "${projectDir}/src/generated/java"

// Add generated code into source set.
sourceSets.main.java.srcDir generatedCCBRMethodLibraryModelGeneratedDir

// Ensure the generated files are in the compiled source, along with forcing the generation process
compileJava.source generateCCBRMethodLibraryJaxbJavaFiles.outputs.files, sourceSets.main.java

task generateCCBRMethodLibraryJaxbJavaFiles (group: 'ringingmaster') {

    // Drive the UP-TO-DATE mechanism
    inputs.dir generatedCCBRMethodLibraryModelSchemaDir
    outputs.dir generatedCCBRMethodLibraryModelClassesDir

    doFirst() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: generatedCCBRMethodLibraryModelGeneratedDir)
            mkdir(dir: generatedCCBRMethodLibraryModelClassesDir)

            xjc(destdir: generatedCCBRMethodLibraryModelGeneratedDir) {
                schema(dir: generatedCCBRMethodLibraryModelSchemaDir, includes: "**/*.xsd")
                arg(value: "-nv")
                produces(dir: generatedCCBRMethodLibraryModelGeneratedDir, includes: "**/*.java")
            }
        }
    }
}


task generateMethodLibrary (group: 'ringingmaster', dependsOn: ['generateCCBRMethodLibraryJaxbJavaFiles', 'classes'], type: JavaExec) {
    main = 'com.ringingmaster.extraction.NotationLibraryBuilder'
    classpath = sourceSets.main.runtimeClasspath
    args '/allmeths.xml', project.getBuildDir().toString() + '/notationlibrary.xml'
}
apply plugin: 'java'

group 'com.concurrentperformance.ringingmaster'
version '1.0.0'

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

repositories {
    mavenCentral()
}


configurations {
    jaxb
}

dependencies {
    compile 'com.concurrentperformance.ringingmaster:ringingmaster-persist:1.0.0'
    compile 'com.concurrentperformance.ringingmaster:ringingmaster-engine:1.0.0'

    jaxb 'com.sun.xml.bind:jaxb-xjc:2.2.7-b41'
    jaxb 'com.sun.xml.bind:jaxb-impl:2.2.7-b41'
    jaxb 'javax.xml.bind:jaxb-api:2.2.7'
}

def generatedCCBRMethodLibraryModelSchemaDir = "${projectDir}/src/main/ccResources"
def generatedCCBRMethodLibraryModelClassesDir = "${buildDir}/classes/generated/jaxb"
def generatedCCBRMethodLibraryModelGeneratedDir = "${projectDir}/src/generated/java"

// Add generated code into source set.
sourceSets.main.java.srcDir generatedCCBRMethodLibraryModelGeneratedDir
sourceSets.main.resources.srcDir generatedCCBRMethodLibraryModelSchemaDir

task generateCCBRMethodLibraryJaxbJavaFiles (group: 'ringingmaster') {

    // Drive the UP-TO-DATE mechanism
    inputs.dir generatedCCBRMethodLibraryModelSchemaDir
    outputs.dir generatedCCBRMethodLibraryModelClassesDir

    doFirst() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: generatedCCBRMethodLibraryModelGeneratedDir)
            mkdir(dir: generatedCCBRMethodLibraryModelClassesDir)

            xjc(destdir: generatedCCBRMethodLibraryModelGeneratedDir) {
                schema(dir: generatedCCBRMethodLibraryModelSchemaDir, includes: "**/*.xsd")
                arg(value: "-nv")
                produces(dir: generatedCCBRMethodLibraryModelGeneratedDir, includes: "**/*.java")
            }
        }
    }
}

// Ensure the generated files are in the compiled source, along with forcing the generation process
compileJava.source generateCCBRMethodLibraryJaxbJavaFiles.outputs.files, sourceSets.main.java

clean{
    delete generatedCCBRMethodLibraryModelGeneratedDir
}


def artifactsDir = "${buildDir}/artifacts"

task generateMethodLibrary (group: 'ringingmaster', dependsOn: ['generateCCBRMethodLibraryJaxbJavaFiles', 'classes'], type: JavaExec) {
    mkdir(dir: artifactsDir)
    
    main = 'com.ringingmaster.extraction.NotationLibraryBuilder'
    classpath(sourceSets.main.runtimeClasspath)
    classpath(sourceSets.test.runtimeClasspath) //To get the logging libs
    args ["/allmeths.xml", "${artifactsDir}/notationlibrary.xml"]
}